package DataStructure.Hashing;

import java.util.ArrayList;
import java.util.Objects;

public class Map<K,V>{
    // Arraylist that maintains the key value
    private ArrayList<HashNode<K,V>> bucketArray;

    //capacity of arraylist
    private int numBuckets;

    private int size;

    public Map(){
        bucketArray = new ArrayList<>();
        numBuckets = 10;
        size = 0;

        for (int i = 0; i < numBuckets; i++)
            bucketArray.add(null);
    }

    // to get the size
    public int getSize(){
        return size;
    }

    // to check if it is empty
    public boolean isEmpty(){
        return size==0;
    }

    // to get the default hashcode of key that is created by JVM in java
    private final int hashCode(K key){
        return Objects.hashCode(key);
    }

    // to get the index of the key in the Ht
    private int getBucketIndex(K key){
        int hashCode = hashCode(key);
        // hashCode is generated by JVM we need to compress it based on arraylist size
        int index = hashCode % numBuckets;
        // index can be negative and we need positive values so
        index = index < 0? index*(-1):index;
        return index;
    }

    // to get the values corresponding to the input key
    public V get(K key){
        int hashcode = hashCode(key);
        int bucketIndex = getBucketIndex(key);
        HashNode<K,V> head = bucketArray.get(bucketIndex);
        while (head != null){
            if(head.key.equals(key) && head.hashCode == hashcode)
                return head.value;
            head = head.next;
        }
        // when key is not found return null
        return null;
    }

    // to remove a key value pair from map
    public V remove(K key){
        int hashcode = hashCode(key);
        int bucketIndex = getBucketIndex(key);
        HashNode<K,V> head = bucketArray.get(bucketIndex);
        // SO there can be 2 cases, 1- when key is present at head of the index and 2- when key is somewhere after head

        HashNode<K,V> prev = null;
        while (head != null){
            if (head.key.equals(key) && head.hashCode == hashcode)
                break;
            prev = head;
            head = head.next;
        }

        // when key is not present
        if(head == null)
            return null;

        //reduce size
        size--;

        // This is the case where key is present somewhere after the head
        if( prev != null)
            prev.next = head.next;
        else
            //this is the case where key is present at the head, we are updating the index with the head.next node
            bucketArray.set(bucketIndex,head.next);

        return head.value;
    }


    //to add a key value pair
    public void add(K key, V value){
        int hashCode = hashCode(key);
        int bucketIndex = getBucketIndex(key);
        HashNode<K,V> head = bucketArray.get(bucketIndex);

        // Check if key is already present in the HT
        while(head != null){
            if(head.key.equals(key) && head.hashCode == hashCode) {
                // In this scenario just update the existing value and exit
                head.value = value;
                return;
            }
            head = head.next;
        }
        // When key is not already present
        // increase the size
        size++;
        head = bucketArray.get(bucketIndex);
        HashNode<K,V> newNode = new HashNode<K,V>(key,value,hashCode);
        // So we are inserting this newNode at the start of the chain, and its next will point to the current head(current head can be null or a chain of nodes)
        newNode.next = head;
        // We are setting this newNode as the first element of the chain at the address location
        bucketArray.set(bucketIndex,newNode);

        // Now we need to check if the load factor is beyond a certain point and in that scenario double the size of Array
        if((1.0*size)/numBuckets >= 0.7){
            ArrayList<HashNode<K,V>> temp = bucketArray;
            bucketArray = new ArrayList<>();
            // increase the capacity by 2
            numBuckets = numBuckets * 2;
            size = 0;
            for (int i = 0; i < numBuckets; i++)
                bucketArray.add(null);

            // re populate using the same add method
            for (HashNode<K,V> headNode : temp){
                while (headNode != null){
                    add(headNode.key,headNode.value);
                    headNode = headNode.next;

                }
            }
        }

    }



}
